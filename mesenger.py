from customtkinter import *
import base64
import io
import threading
import os
import time
from socket import *
from tkinter import filedialog
from PIL import Image
from datetime import datetime

class MainWindow(CTk):
    def __init__(self):
        super().__init__()
        self.geometry("600x500")
        self.title("ChatPro")
        self.label = None

        # --- –ó–º—ñ–Ω–Ω—ñ ---
        self.username = "Yaroslav"
        self.avatar_path = None
        self.user_avatars = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.sock = None
        self.server_address = ("localhost", 2525)
        self.connected = False

        # --- –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å ---
        self.menu_frame = CTkFrame(self, width=30, height=self.winfo_height())
        self.menu_frame.pack_propagate(False)
        self.menu_frame.place(x=0, y=0)

        self.is_show_menu = False
        self.speed_animate_menu = -5

        self.btn = CTkButton(self, text='‚ñ∂Ô∏è', command=self.toggle_show_menu, width=30)
        self.btn.place(x=0, y=0)

        # --- –û–±–ª–∞—Å—Ç—å —á–∞—Ç—É ---
        self.chat_field = CTkScrollableFrame(self)
        self.chat_field.place(x=0, y=0)

        self.message_entry = CTkEntry(self, placeholder_text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", height=40)
        self.message_entry.place(x=0, y=0)

        self.send_button = CTkButton(self, text=">", width=50, height=40, command=self.send_message)
        self.send_button.place(x=0, y=0)

        self.img_button = CTkButton(self, text="üì∑", width=50, height=40, command=self.choose_image)
        self.img_button.place(x=60, y=0)

        self.addptive_ui()
        self.connect_to_server()

    # --- –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π UI ---
    def addptive_ui(self):
        self.menu_frame.configure(height=self.winfo_height())
        self.chat_field.place(x=self.menu_frame.winfo_width())
        self.chat_field.configure(width=self.winfo_width() - self.menu_frame.winfo_width() - 20,
                                  height=self.winfo_height() - 40)

        self.send_button.place(x=self.winfo_width() - 50, y=self.winfo_height() - 40)
        self.img_button.place(x=self.winfo_width() - 100, y=self.winfo_height() - 40)

        self.message_entry.place(x=self.menu_frame.winfo_width(), y=self.send_button.winfo_y())
        self.message_entry.configure(
            width=self.winfo_width() - self.menu_frame.winfo_width() - self.send_button.winfo_width() - 60)

        self.after(50, self.addptive_ui)

    # --- –ë–æ–∫–æ–≤–µ –º–µ–Ω—é ---
    def toggle_show_menu(self):
        if self.is_show_menu:
            self.is_show_menu = False
            self.speed_animate_menu *= -1
            self.btn.configure(text='‚ñ∂Ô∏è')
            self.show_menu()
        else:
            self.is_show_menu = True
            self.speed_animate_menu *= -1
            self.btn.configure(text='‚óÄÔ∏è')
            self.show_menu()

            self.label = CTkLabel(self.menu_frame, text='–Ü–º º—è')
            self.label.pack(pady=10)
            self.entry = CTkEntry(self.menu_frame)
            self.entry.pack(pady=5)
            self.save_btn = CTkButton(self.menu_frame, text="–ó–±–µ—Ä–µ–≥—Ç–∏ –Ü–º—è", command=self.save_name)
            self.save_btn.pack(pady=5)

            self.avatar_label = CTkLabel(self.menu_frame, text="–ê–≤–∞—Ç–∞—Ä–∫–∞")
            self.avatar_label.pack(pady=10)
            self.avatar_btn = CTkButton(self.menu_frame, text="–û–±–µ—Ä—ñ—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É", command=self.choose_avatar)
            self.avatar_btn.pack()

    def show_menu(self):
        self.menu_frame.configure(width=self.menu_frame.winfo_width() + self.speed_animate_menu)
        if not self.menu_frame.winfo_width() >= 200 and self.is_show_menu:
            self.after(10, self.show_menu)
        elif self.menu_frame.winfo_width() >= 40 and not self.is_show_menu:
            self.after(10, self.show_menu)
            if self.label and self.entry:
                self.label.destroy()
                self.entry.destroy()
                self.save_btn.destroy()
                self.avatar_label.destroy()
                self.avatar_btn.destroy()

    # --- –ó–º—ñ–Ω–∞ —ñ–º–µ–Ω—ñ ---
    def save_name(self):
        new_name = self.entry.get().strip()
        if new_name:
            self.username = new_name
            self.add_message("–í–∞—à –Ω–æ–≤–∏–π –Ω—ñ–∫: " + self.username)

    # --- –í–∏–±—ñ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏ ---
    def choose_avatar(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Images", "*.png;*.jpg;*.jpeg;*.gif")]
        )
        if file_path:
            try:
                pil_img = Image.open(file_path)
                ctk_img = CTkImage(pil_img, size=(30, 30))  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ CTkImage
                self.user_avatars[self.username] = ctk_img  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è —Å–µ–±–µ
                self.add_message("–í–∏ –æ–±—Ä–∞–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫—É.")
                # –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä —É base64, —è–∫—â–æ —Ö–æ—á–µ—à
                with open(file_path, "rb") as f:
                    b64_data = base64.b64encode(f.read()).decode()
                data = f"AVATAR@{self.username}@{b64_data}\n"
                try:
                    self.sock.sendall(data.encode())
                except:
                    pass
            except Exception as e:
                self.add_message(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
    def add_message(self, text, img=None, author=None):
        if not author:
            author = self.username

        message_frame = CTkFrame(self.chat_field, fg_color='grey')
        message_frame.pack(pady=5, fill="x")

        wrapleng_size = self.winfo_width() - self.menu_frame.winfo_width() - 40
        time_str = datetime.now().strftime("%H:%M")
        text_with_time = f"[{time_str}] {text}"

        avatar_img = self.user_avatars.get(author)
        side = 'e' if author == self.username else 'w'

        if avatar_img:
            CTkLabel(message_frame, image=avatar_img, text=text_with_time,
                     compound="right" if side == 'e' else "left",
                     wraplength=wrapleng_size, text_color='white', anchor=side).pack(padx=5, pady=5, anchor=side)
        elif img:
            CTkLabel(message_frame, text=text_with_time,
                     wraplength=wrapleng_size, text_color='white',
                     image=img, compound='top', anchor=side).pack(padx=10, pady=5, anchor=side)
        else:
            CTkLabel(message_frame, text=text_with_time,
                     wraplength=wrapleng_size, text_color='white', anchor=side).pack(padx=5, pady=5, anchor=side)

    # --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç—É ---
    def send_message(self):
        message = self.message_entry.get().strip()
        if message and self.connected:
            data = f"TEXT@{self.username}@{message}\n"
            try:
                self.sock.sendall(data.encode())
            except:
                self.add_message("[–°–∏—Å—Ç–µ–º–∞] –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è. –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
                self.reconnect()
        self.message_entry.delete(0, END)

    # --- –í–∏–±—ñ—Ä —Ñ–æ—Ç–æ ---
    def choose_image(self):
        file_name = filedialog.askopenfilename(
            filetypes=[("Images", "*.png;*.jpg;*.jpeg;*.gif")]
        )
        if file_name:
            self.open_image(file_name)

    # --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ ---
    def open_image(self, file_name):
        if not self.connected:
            self.add_message("[–°–∏—Å—Ç–µ–º–∞] –í—ñ–¥—Å—É—Ç–Ω—î –∑'—î–¥–Ω–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return
        try:
            with open(file_name, "rb") as f:
                raw = f.read()
                b64_data = base64.b64encode(raw).decode()
            short_name = os.path.basename(file_name)
            data = f"IMAGE@{self.username}@{short_name}@{b64_data}\n"
            self.sock.sendall(data.encode())
        except Exception as e:
            self.add_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

    # --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ---
    def connect_to_server(self):
        try:
            self.sock = socket(AF_INET, SOCK_STREAM)
            self.sock.connect(self.server_address)
            self.connected = True
            self.user_avatars[self.username] = self.avatar_path
            hello = f"TEXT@{self.username}@[SYSTEM] {self.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è(–ª–∞—Å—å) –¥–æ —á–∞—Ç—É!\n"
            self.sock.sendall(hello.encode())
            threading.Thread(target=self.recv_message, daemon=True).start()
        except:
            self.connected = False
            self.add_message("[–°–∏—Å—Ç–µ–º–∞] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è. –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
            threading.Thread(target=self.reconnect, daemon=True).start()

    # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ---
    def reconnect(self):
        while not self.connected:
            try:
                self.sock = socket(AF_INET, SOCK_STREAM)
                self.sock.connect(self.server_address)
                self.connected = True
                self.add_message("[–°–∏—Å—Ç–µ–º–∞] –ó'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ!")
                hello = f"TEXT@{self.username}@[SYSTEM] {self.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è(–ª–∞—Å—å) –¥–æ —á–∞—Ç—É!\n"
                self.sock.sendall(hello.encode())
                threading.Thread(target=self.recv_message, daemon=True).start()
                break
            except:
                self.add_message("[–°–∏—Å—Ç–µ–º–∞] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
                time.sleep(5)

    # --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
    def recv_message(self):
        buffer = ""
        while True:
            try:
                chunk = self.sock.recv(4096)
                if not chunk:
                    self.connected = False
                    self.add_message("[–°–∏—Å—Ç–µ–º–∞] –í—Ç—Ä–∞—á–µ–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è. –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
                    threading.Thread(target=self.reconnect, daemon=True).start()
                    break
                buffer += chunk.decode('utf-8', errors='ignore')
                while "\n" in buffer:
                    line, buffer = buffer.split("\n", 1)
                    self.handle_line(line.strip())
            except:
                self.connected = False
                self.add_message("[–°–∏—Å—Ç–µ–º–∞] –í—Ç—Ä–∞—á–µ–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è. –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
                threading.Thread(target=self.reconnect, daemon=True).start()
                break

    # --- –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
    def handle_line(self, line):
        if not line:
            return
        parts = line.split("@", 3)
        msg_type = parts[0]

        if msg_type == "TEXT" and len(parts) >= 3:
            author = parts[1]
            message = parts[2]
            self.add_message(f"{author}: {message}", author=author)

        elif msg_type == "IMAGE" and len(parts) >= 4:
            author = parts[1]
            filename = parts[2]
            b64_img = parts[3]
            try:
                img_data = base64.b64decode(b64_img)
                pil_img = Image.open(io.BytesIO(img_data))
                ctk_img = CTkImage(pil_img, size=(300, 300))
                self.add_message(f"{author} –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞) –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {filename}", img=ctk_img, author=author)
            except Exception as e:
                self.add_message(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

        elif msg_type == "AVATAR" and len(parts) >= 3:
            author = parts[1]
            b64_data = parts[2]
            self.set_user_avatar(author, b64_data)

    def choose_avatar(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Images", "*.png;*.jpg;*.jpeg;*.gif")]
        )
        if file_path:
            try:
                pil_img = Image.open(file_path)
                ctk_img = CTkImage(pil_img, size=(30, 30))  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ CTkImage
                self.avatar_path = ctk_img  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±'—î–∫—Ç CTkImage
                self.user_avatars[self.username] = ctk_img  # –Ü –¥–ª—è —Å–ª–æ–≤–Ω–∏–∫–∞ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                self.add_message("–í–∏ –æ–±—Ä–∞–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫—É.")
            except Exception as e:
                self.add_message(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")

    def set_user_avatar(self, username, b64_data):
        try:
            img_data = base64.b64decode(b64_data)
            pil_img = Image.open(io.BytesIO(img_data))
            ctk_img = CTkImage(pil_img, size=(30, 30))
            self.user_avatars[username] = ctk_img
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∫–∏ {username}: {e}")


win = MainWindow()
win.mainloop()
